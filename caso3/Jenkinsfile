pipeline {
    agent{
        kubernetes { yaml '''
        apiVersion: v1
        kind: Pod
        metadata:
          labels:
            description: containers-for-jenkins-agent
        spec:
        containers:
        - name: alpine
          image: alpine:3.19.1
          command:
          - sleep
          args:
          - infinity
          volumeMounts:
          - name: kubeconfig-volume
          readOnly: true
          mountPath: "/kubeconfig"
        volumes:
        - name: kubeconfig-volume
          secret:
          secretName: kubeconfig-secret
        '''
        defaultContainer 'alpine'
        }
    }

    environment {
        KUBECONFIG="/kubeconfig/.kubeconfig"
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out code...'
                sh '''
                    apk add git
                    git clone https://github.com/antoniollv/MicroHackatones.git
                '''
            }
        }

        stage('Build') {
            steps {
                echo 'Building the application...como "mvn clean install"'
            }
        }

        stage('Unit Tests') {
            steps {
                echo 'Running unit tests...ejemplo "mvn test"'
            }
        }

        stage('Code Quality Checks') {
            steps {
                echo 'Running code quality checks...'
                echo 'Comandos para ejecutar herramientas de análisis estático de código, por ejemplo, SonarQube'
            }
        }

        stage('Integration Tests') {
            steps {
                echo 'Running integration tests...'
                echo 'Pruebas de integración, como Selenium pra aplicaciones basadas en la web o Postman para APIs...'
            }
        }

        stage('Security Scans') {
            steps {
                echo 'Running security scans...'
                echo '/ Comandos para ejecutar análisis de seguridad por ejemplo, OWASP Dependency-Check'
            }
        }

        stage('Deploy to Staging') {
            when {
                branch 'develop'
            }
            steps {
                echo 'Deploying to staging environment...'
                echo 'Comandos para desplegar en un entorno de staging'
            }
        }

        stage('Acceptance Tests') {
            when {
                branch 'develop'
            }
            steps {
                echo 'Running automated acceptance tests...Estas nos se como se hacen autumáticas'
            }
        }

        stage('Manual Approval') {
            when {
                expression {
                    return env.BRANCH_NAME == 'master'
                }
            }
            steps {
                echo 'Waiting for manual approval...'
                echo ' Agregar pasos para notificar y esperar la aprobación manual'
            }
        }

        stage('Promote to Next Release') {
            when {
                expression {
                    return env.BRANCH_NAME == 'develop' && currentBuild.resultIsBetterThan('SUCCESS')
                }
            }
            steps {
                echo 'Promoting code to the next release...'
                echo 'Agregar pasos para promover el código a la siguiente release por ejemplo, fusionar con la rama de release'
            }
        }

        stage('Archive Artifacts') {
            steps {
                echo 'Archiving artifacts...'
                echo 'Archivar artefactos generados durante la compilación'
                echo' Ejemplo: archiveArtifacts artifacts: "target/*.jar", fingerprint: true'
            }
        }

        stage('Deploy to Production') {
            when {
                branch 'master'
            }
            steps {
                echo 'Deploying to production environment...'
                sh '''
                    apk add curl
                    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
                    echo "$(cat kubectl.sha256)  kubectl" | sha256sum -c
                    install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
                    kubectl version --client --output=yaml
                    apk add helm
                    kubectl delete namespace mh-caso2
                    helm install webapp1969 ./MikroHackkatones/caso2/webapp --create-namespace --namespace mh-caso2
                '''
            }
        }

    }

    post {
        always {
            echo 'Cleaning up...'
            // Agregar pasos de limpieza si es necesario
        }

        success {
            echo 'Pipeline succeeded!'
            // Pasos adicionales en caso de éxito
        }

        failure {
            echo 'Pipeline failed. Check the logs for details.'
            // Pasos adicionales en caso de fallo
        }
    }
}
